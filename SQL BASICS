CREATE TABLE students(

student_id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(20)  NOT NULL,
major VARCHAR(20) DEFAULT 'UNDECIDED'

);

DESCRIBE students;

DROP TABLE students;


ALTER TABLE students ADD cpi DECIMAL(3,2);


ALTER TABLE students DROP COLUMN cpi;

INSERT INTO  students(name,major) VALUES('Jack','Biology');
INSERT INTO  students(name,major) VALUES('Kate','Sociology');
INSERT INTO students(name,major) VALUES('Clair','chemistry');
INSERT INTO students VALUES(2,'Kate','Sociology');
INSERT INTO students VALUES(4,'Jack','Biology');
INSERT INTO students(name,major) VALUES('Mike','Computer Science');

INSERT INTO students(student_id, name) VALUES(3,'Clair');

SELECT * FROM students;

UPDATE students SET major='Bio' WHERE major='Biology';
UPDATE students SET major='Comp sci' WHERE major ='Computer Science';
UPDATE students SET major='Comp Sci' WHERE student_id=4;

UPDATE students SET major='Biochemistry' WHERE major='Bio' or major='chemistry';

UPDATE students SET major='undecided';

select name,major from students order by name ;


select name,major from students order by name desc;


select students.name, students.major from students order by name;

select * from students order by major,student_id;

select * from students order by major desc, student_id asc;

SELECT * FROM students  order by student_id desc LIMIT 2;

select name from students where major <> 'Biology' order by student_id LIMIT 2;

select * from students where name in('clair','Kate','Mike');

select * from students;




CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT,
  branch_id INT
);


CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;


CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);


CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

-- Corporate
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);


INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);


-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

-- find all employees.
select * from employee;

-- find all client
select * from client;

-- find all employees order by salary.

select * from employee order by salary DESC;

-- find all employee order by sex, then name

select * from employee order by sex, first_name,last_name;

-- find the first 5 employee in the table

select * from employee limit 5;

-- find the forename and sirname of all employee.

select first_name as forename, last_name as sirname from employee;

-- find out all the different gender.

SELECT distinct sex from employee;

-- selecting distinct branch id's

select distinct branch_id from employee;

-- FUNCTIONS IN SQL--


-- find the no of employee
select count(emp_id) from employee;

select count(super_id) from employee;

-- find the no. of female employees born after 1970.

select count(emp_id) from employee where sex='F' and birth_day> '1971-01-01';

-- find the avg of all the employees salary.

select avg(salary) from employee;

-- find the average salary of the male employees.

select avg(salary) from employee where sex='M';

-- find the sum of salary of all the employees.

select sum(salary) from employee;

-- find out how many males and females are there.

select count(sex),sex from employee group by sex;

-- find the total sales of each salesman

select sum(total_sales) , emp_id from works_with group by emp_id;

-- find the money spend by each client in a branch.

select sum(total_sales) , client_id from works_with group by client_id;

-- WILDCARDS

-- % = any no. of characters , _ = one character

-- find any client who are in LLC.

select * from client where client_name like '%LLC%';

-- find any branch suppliers  who are in the label  buisness 

select * from branch_supplier where supplier_name like '%Labels%';

-- find any employee born in october

select * from employee where birth_day like '%02%';

-- find any clients who are schools.

select * from client where client_name like '%school%';

-- UNION

-- find the list of employees and branch name.

select first_name from employee;
select branch_name from branch;

select first_name from employee UNION select branch_name from branch;

select client_name,branch_id from client union select supplier_name,branch_id from branch_supplier;

-- find a list of all money spent or earned by the company.

select salary from employee union select total_sales from works_with;

-- JOINS

insert into branch values(4,'Buffalo', NULL, NULL);

select * from branch;

select employee.emp_id,employee.first_name, branch.branch_name 
from employee join branch on employee.emp_id=branch.mgr_id;

select employee.emp_id,employee.first_name, branch.branch_name
from employee left join branch on employee.emp_id=branch.mgr_id;

select employee.emp_id,employee.first_name, branch.branch_name
from employee right join branch on employee.emp_id=branch.mgr_id;

-- nested queries

-- find name of all employees who have sold over 30,000 to single  client

select employee.first_name, employee.last_name from employee where employee.emp_id in (


select works_with.emp_id from works_with where works_with.total_sales > 30000


);

-- find all clients  who are handeled by  the branch that MIcheal scott manages, Assume that micheal ID is known.

select client.client_name from client where client.branch_id=(


select branch.branch_id from branch where branch.mgr_id=102

);

select client.client_name from client where client.branch_id=(


select branch.branch_id from branch where branch.mgr_id=102 limit 1 -- to ensure only one vlaue

);

delete from employee where emp_id=102;
select * from branch;

select * from employee;

delete from branch where branch_id=2;

select * from branch_supplier;

create table trigger_test(
message  VARCHAR(100)

);


delimiter $$
create 
       trigger my_trigger before insert
       on employee for each row begin
          insert into trigger_test values('added new employee');
      end $$
  
 delimiter; 
 
 insert into employee values(109, 'oscar' , 'Martienz', '1968-02-19', 'M', 69000,106,3);
 
 select * from trigger_test;
 
 delimiter @
 
 create
       trigger my_trigger1 before insert
       on employee
       for each row begin
                insert into trigger_test values(new.first_name);
        end @
        
delimiter;        


insert into employee values(111, 'Kevin','Malone','1978-02-19','M',69000,106,3);

select * from trigger_test;

delimiter &&

create 
       trigger my_new_trigger before insert
       on employee 
       for each row begin
           if new.sex='M' then 
               insert into trigger_test values('added male employee');
           elseif new.sex='F' then
               insert into trigger_test values('added female');
           else
               insert into trigger_test values('added other employees');
            end if;
        end &&
        
delimiter;        
          

















  







































































